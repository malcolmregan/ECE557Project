
Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 7.5	# [1]
}


Epsilon_aniso
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 7.5	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + alpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
	refractiveindex	= 2.74	# [1]
	alpha	= 2.0000e-04	# [1/K]

  * Gain dependence of refractive index in active region:
  * a) Linear model: delta n = a0 * ( (n+p)/(2 * N0) - 1)
  * b) Logarithmic model: delta n = a0 * log ( (n+p)/(2 * N0) )
  * where n/p are the carrier densities in the active region. 
	a0	= 0.0000e+00	# [1]
	N0	= 1.0000e+18	# [1/cm^3]
}


ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *     n_0, k_0 
  
  * Wavelength dependence (real and imag): 
  *     Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *                delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *     Formula 1: Read tabulated values 
  *                NumericalTable (...)  
  *     Formula 2: Read tabulated values from file 
  *                NumericalTable = <string> 
  
  * Temperature dependence (real): 
  *     delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
  
  * Carrier dependence (real) 
  *     delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
  
  * Carrier dependence (imag) 
  *     delta_k_carr = 1 / (4*PI) * (wavelength^Gamma_k_carr_e*Ck_carr_e*n + wavelength^Gamma_k_carr_h*Ck_carr_h*p) 
  
  * Gain dependence (real) 
  *     lin: delta_n_gain = Cn_gain * ( (n+p)/(2 * Npar) - 1) 
  *     log: delta_n_gain = Cn_gain * log ( (n+p)/(2 * Npar ) )
	n_0	= 2.74	# [1]
	k_0	= 0.0000e+00	# [1]
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
	Cn_temp	= 2.0000e-04	# [K^-1]
	Cn_carr	= 1	# [1]
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
	Gamma_k_carr	= 1 ,	1	# [1]
	Cn_gain	= 0.0000e+00	# [1]
	Npar	= 1.0000e+18	# [cm^-3]
        Formula = 1
        TableInterpolation = PositiveSpline, PositiveSpline
        NumericalTable ( 
          0.05166	0.655	0.42;
          0.05391	0.625	0.481;
          0.05636	0.611	0.56;
          0.05904	0.617	0.647;
          0.06199	0.635	0.743;
          0.06526	0.676	0.841;
          0.06888	0.735	0.936;
          0.07293	0.81	1.03;
          0.07749	0.902	1.11;
          0.08266	1.001	1.18;
          0.08856	1.111	1.26;
          0.09537	1.247	1.35;
          0.1033	1.417	1.43;
          0.1127	1.657	1.52;
          0.1181	1.827	1.53;
          0.124	2	1.49;
          0.1305	2.162	1.44;
          0.1378	2.326	1.32;
          0.1459	2.492	1.16;
          0.155	2.651	0.962;
          0.16	2.711	0.866;
          0.1653	2.753	0.75;
          0.171	2.766	0.612;
          0.1771	2.752	0.493;
          0.1837	2.724	0.38;
          0.1907	2.682	0.273;
          0.1984	2.62	0.174;
          0.2066	2.541	0.102;
          0.2156	2.464	0.057;
          0.2254	2.393	0.029;
          0.2362	2.331	0.011;
          0.248	2.278	4.9000e-03;
          0.261	2.234	1.2000e-03;
          0.2755	2.198	2.2000e-04;
          0.2917	2.167	0.0000e+00;
          0.31	2.141	0.0000e+00;
          0.3542	2.099	0.0000e+00;
          0.4133	2.066	0.0000e+00;
          0.4959	2.041	0.0000e+00;
          0.6199	2.022	0.0000e+00;
          0.8266	2.008	0.0000e+00;
          1.24	1.998	0.0000e+00;
          1.3	1.99	0.0000e+00;
          10.001	1.99	0.0000e+00;
        ) 
	Tpar	= 3.0000e+02	# [K]
} 


* SpectralConversion
* { * Spectral Conversion Model
*   No default model, user has to define.
*   All wavelength parameters should be in nanometers.
*   Choice of Analytic or NumericalTable selected in Physics section of region
*  
*   ConversionEfficiency = float     * ratio of absorbed photons that are reemitted.
*   AbsorptionScaling = float        * scale absorption
*   EmissionScaling = float          * scale emission
*   Analytic (
*     AbsorptionProfile = (
*        Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
*        Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
*        ...
*     )
*     EmissionProfile = (
*        Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
*        Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
*        ...
*     )
*   )
*   NumericalTable (
*     AbsorptionProfile = (
*        lambda0 value0
*        lambda1 value1
*        ...
*     )
*     EmissionProfile = (
*        lambda0 value0
*        lambda1 value1
*        ...
*     )

*   ConversionEfficiency = 1.0
* }


LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
	cv	= 2.78	# [J/(K cm^3)]
	cv_b	= 0.0000e+00	# [J/(K^2 cm^3)]
	cv_c	= 0.0000e+00	# [J/(K^3 cm^3)]
	cv_d	= 0.0000e+00	# [J/(K^4 cm^3)]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 1:
  * kappa() = kappa + kappa_b * T + kappa_c * T^2 
	kappa	= 0.185	# [W/(K cm)]
	kappa_b	= 0.0000e+00	# [W/(K^2 cm)]
	kappa_c	= 0.0000e+00	# [W/(K^3 cm)]
}


Kappa_aniso
{ *  Lattice thermal conductivity

  * Formula = 1:
  * kappa() = kappa + kappa_b * T + kappa_c * T^2 
	kappa	= 0.185	# [W/(K cm)]
	kappa_b	= 0.0000e+00	# [W/(K^2 cm)]
	kappa_c	= 0.0000e+00	# [W/(K^3 cm)]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Chi0	= 1.9	# [eV]
	Eg0	= 5	# [eV]
	alpha	= 0.0000e+00	# [eV K^-1]
	beta	= 0.0000e+00	# [K]
	alpha2	= 0.0000e+00	# [eV K^-1]
	beta2	= 0.0000e+00	# [K]
	EgMin	= -1.0000e+01	# [eV]
	dEgMin	= 0.0000e+00	# [eV]
	Tpar	= 0.0000e+00	# [K]
}

eDOSMass
{
  * For effective mass specification Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
  * mt = a[Eg(0)/Eg(T)] 
  * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.5094e19 ((me/m0)*(T/300))^3/2 
	a	= 0.0000e+00	# [1]
	ml	= 0.0000e+00	# [1]
	mm	= 0.42	# [1]
}

hDOSMass
{
  * For effective mass specification Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * mh =  m0*{[(a+bT+cT^2+dT^3+eT^4)/(1+fT+gT^2+hT^3+iT^4)]^(2/3) + mm}
  * Nv(T) = 2(2pi*kB/h_Planck^2*mh*T)^3/2 = 2.5094e19 ((mh/m0)*(T/300))^3/2 
	a	= 0	# [1]
	b	= 0	# [K^-1]
	c	= 0	# [K^-2]
	d	= 0	# [K^-3]
	e	= 0	# [K^-4]
	f	= 0	# [K^-1]
	g	= 0	# [K^-2]
	h	= 0	# [K^-3]
	i	= 0	# [K^-4]
	mm	= 1	# [1]
}

QuantumPotentialParameters
{ * gamma:  weighting factor for quantum potential
  * theta:  weight for quadratic term
  * xi:     weight for quasi Fermi potential
  * eta:    weight for electrostatic potential
  * nu :    weight for DOS mass change from stress
	gamma	= 1 ,	1	# [1]
	theta	= 0.5 ,	0.5	# [1]
	xi	= 0.0000e+00 ,	0.0000e+00	# [1]
	eta	= 0.0000e+00 ,	0.0000e+00	# [1]
	nu	= 0.0000e+00 ,	0.0000e+00	# [1]
}

Makram-Ebeid
{ * mt tunneling mass 
  * Wph phonon energy 
  * Wt thermal energy 
  * Wopt optical energy of ionization 
  * SumNumber series expansion limit 
	mt	= 0.5 ,	0.5	# [1]
	Wph	= 0.06	# [eV]
	Wt	= 1.4	# [eV]
	Wopt	= 2.8	# [eV]
	SumNumber	= 49	# [1]
}

HoppingTransport:
{ * DOSShape: DensityOfState distribution (Gaussian = 0),
  * Nt: density of hopping sites (trapping sites),
  * EnS: energy distribution standard deviation,
  * En0: energy distribution peak from vacuum level,
  * BM: average number of neighboring sites,
  * Alpha: inverse of localization length,
  * Sigma0: constant conductivity,
  * HopFrequency: jump rate prefactor,
  * See the manual for more details.
	DOSShape	= 0 ,	0	# [1]
	Conc	= 1.0000e+19 ,	1.0000e-05	# [cm^-3]
	EnergySig	= 1.5 ,	1.5	# [eV]
	EnergyMid	= 4.4 ,	4.4	# [eV]
	BM	= 2.3 ,	2.3	# [1]
	Alpha	= 1.0000e+06 ,	1.0000e+06	# [cm^-1]
	Sigma0	= 1.0000e+12 ,	1.0000e+12	# [A*V^-1*cm^-1]
	HopFrequency	= 1.0000e+12 ,	1.0000e+12	# [s^-1]
}

Resistivity
{ * Resist(T) = Resist0 * ( 1 + TempCoef * ( T - 273 ) )
	Resist0	= 3.0000e+09	# [ohm*cm]
	TempCoef	= 4.5000e-03	# [1/K]
}

